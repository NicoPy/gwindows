-- GWindows Installer
-- (code first generated by GWenerator as a test application)

with GW_Install_Resource_GUI;           use GW_Install_Resource_GUI;

with Zip;                               use Zip;
with UnZip;

with GWindows.Application;
with GWindows.Base;
with GWindows.Buttons;                  use GWindows.Buttons;
with GWindows.Constants;                use GWindows.Constants;
with GWindows.Message_Boxes;            use GWindows.Message_Boxes;
with GWindows.Windows;                  use GWindows.Windows;

with Ada.Command_Line;                  use Ada.Command_Line;
with Ada.Directories;                   use Ada.Directories;
with Ada.Exceptions;                    use Ada.Exceptions;
with Ada.Strings.Unbounded;             use Ada.Strings.Unbounded;

procedure GW_Install is

  pragma Linker_Options ("-mwindows");

  Main_Dlg  : GW_Install_Resource_GUI.Install_dialog_Type;
  Result    : Integer;
  No_Parent : Window_Type;

  Install_dir: Unbounded_String:= To_Unbounded_String("C:\temp");

  procedure Select_directory( dummy : in out GWindows.Base.Base_Window_Type'Class ) is
    pragma Warnings(off, dummy);
  begin
    null;-- !!
  end Select_directory;

  procedure Get_Data ( dummy : in out GWindows.Base.Base_Window_Type'Class ) is
    pragma Warnings(off, dummy);
  begin
    Install_dir:= To_Unbounded_String(Main_Dlg.Directory_edit.Text);
  end Get_Data;

  type Character_mode is (ANSI, UNICODE);
  Mode: Character_mode;
  Proceed, OK: Boolean;

  procedure Self_extract(Success: out Boolean) is
    zi: Zip_Info;
    n: Natural:= 0;
    --
    procedure Tell_data
              ( name               : String;
                compressed_bytes   : File_size_type;
                uncompressed_bytes : File_size_type;
                method             : PKZip_method )
    is
    pragma Unreferenced (compressed_bytes, uncompressed_bytes, method);
      pct: Natural;
    begin
      n:= n + 1;
      pct:= (100 * n) / Entries(zi);
      null; -- show progress in a nice box!!
    end;
    --
    mem: constant String:= Current_Directory;
  begin
    Success:= False;
    Set_Directory(To_String(Install_dir));
    begin
      Load(zi, Command_Name);
      UnZip.Extract(
        zi,
        null,
        null,
        Tell_Data'Unrestricted_Access,
        null
        );
    exception
      when E:others =>
        Message_Box(
          "GWindows installation error",
          "Archive extraction failed" &
          ASCII.LF &
          "Archive = " & Command_Name &
          ASCII.LF &
          Exception_Name(E) &
          ASCII.LF &
          Exception_Message(E),
          Icon => Error_Icon
        );
        Set_Directory(mem);
        return;
    end;
    Set_Directory(mem);
    Success:= True;
  end Self_extract;

begin
  if Argument_Count > 0 then
    -- Install_dir
    -- /a = ANSI
    -- /u = UNICODE
    -- /c = command line, no GUI, no question: can be used in a batch file
    --
    null; -- !!
  end if;
  loop
    Create_Full_Dialog (Main_Dlg, No_Parent);
    Center(Main_Dlg);
    Small_Icon (Main_Dlg, "AAA_Main_Icon");
    Large_Icon (Main_Dlg, "AAA_Main_Icon");
    Main_Dlg.Directory_select_button.Hide;
    Main_Dlg.Directory_select_button_permanent.Show;
    Main_Dlg.ANSI_choice.State(Checked);
    Main_Dlg.Text(
      Main_Dlg.Text & " version " &
      Version_info.FileVersion
    );
    Main_Dlg.Setup_title.Text(
      Main_Dlg.Setup_title.Text &
      ", version " & Version_info.FileVersion
    );
    Main_Dlg.Directory_edit.Text(To_String(Install_dir));
    On_Destroy_Handler (Main_Dlg, Get_Data'Unrestricted_Access);
    On_Click_Handler (
      Main_Dlg.Directory_select_button_permanent,
      Select_directory'Unrestricted_Access
    );
    Result := GWindows.Application.Show_Dialog (Main_Dlg);
    exit when Result = IDCANCEL;
    if Main_Dlg.ANSI_choice.State = Checked then
      Mode:= ANSI;
    else
      Mode:= UNICODE;
    end if;
    Proceed:= True;
    -- We check: 1) existing version 2) valid directory
    if Ada.Directories.Exists(To_String(Install_dir) & "\framework\gwindows.ads") then
      -- Conflict
      -- ask !!
      null;
    end if;
    begin
      Create_Path(To_String(Install_dir));
    exception
      when Name_Error =>
        Proceed:= False;
        Message_Box(
          "Invalid directory for GWindows installation",
          "Directory """ &
          To_String(Install_dir) &
          """ cannot be created",
          Icon => Error_Icon
        );
    end;
    if Proceed then
      Self_extract(OK);
      if not OK then
        exit;
      end if;
      case Mode is
        -- !! copy ansi or unicode
        when ANSI =>
          null;
        when UNICODE =>
          null;
      end case;
      -- goodbye panel
      exit;
    end if;
  end loop;
end GW_Install;
